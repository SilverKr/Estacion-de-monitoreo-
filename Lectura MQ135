#include <MQUnifiedsensor.h>
#include <WiFi.h>


#define placa "ESP-32"
#define Voltage_Resolution 3.3
#define pin 13 // Entrada analoga para el sensor
#define type "MQ-135" //MQ135
#define ADC_Bit_Resolution 12 // Resolución ADC
#define RatioMQ135CleanAir 3.6//RS / R0 


// Declaración del sensor
MQUnifiedsensor MQ135(placa, Voltage_Resolution, ADC_Bit_Resolution, pin, type);

String medidas = ""; //Constante que guarda las mediciones


//----------------------------- Configuración Wifi / MQTT --------------------------

const char* ssid = "FAMIRONDE";
const char* password = "Contig8mas";
const char* mqttBroker = "0.0.0.0";
const int mqttPort = 1883;
const char* mqttTopic = "ATM";
const char* clientName = "ESP32";     

WiFiClient espClient;
PubSubClient mqttClient(espClient);


void setup() {

  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.println("Conectando WiFi...");
  }

  mqttClient.setServer(mqttBroker, mqttPort);
  mqttClient.setCallback(callback);

  reconnect();

  Serial.begin(115200);


  //Modelo matematico para calcular la concentración de PPM  
  MQ135.setRegressionMethod(1); //_PPM =  a*ratio^b
  //Activación del sensor
  MQ135.init(); 

  //------------ Proceso de calibración ----------------------------

  float calcR0 = 0;
  for(int i = 1; i<=10; i ++)
  {
    MQ135.update(); 
    calcR0 += MQ135.calibrate(RatioMQ135CleanAir);
    Serial.print(".");
  }
  MQ135.setR0(calcR0/10);
  

}

void loop() {

  //------------------------- Captura de datos MQ135 ------------------------------------

  /*
    Parametros de regresión exponencial según gas:
  GAS      | a      | b
  CO       | 605.18 | -3.937  
  Alcohol  | 77.255 | -3.18 
  CO2      | 110.47 | -2.862
  Toluen  | 44.947 | -3.445
  NH4      | 102.2  | -2.473
  Aceton  | 34.668 | -3.369
  */

  MQ135.update(); 
  MQ135.setA(605.18); MQ135.setB(-3.937); // Concentración de CO
  float CO = MQ135.readSensor(); 
  Serial.print("@");
  medidas += String(CO, 2)+"#"; 
  MQ135.setA(77.255); MQ135.setB(-3.18); // Concentración de Alcohol
  float Alcohol = MQ135.readSensor(); 
  medidas += String(Alcohol, 2)+"#"; 
  MQ135.setA(110.47); MQ135.setB(-2.862); // Concentración de CO2
  float CO2 = MQ135.readSensor();
  // A CO2 se le agrega 400 ya que este es el promedio constante de ppm de CO2 en el aire 
  medidas += String(CO2+400, 2)+"#"; 
  MQ135.setA(44.947); MQ135.setB(-3.445); // Concentración de Toluen
  float Toluen = MQ135.readSensor(); 
  medidas += String(Toluen, 2)+"#"; 
  MQ135.setA(102.2 ); MQ135.setB(-2.473); // Concentración de NH4
  float NH4 = MQ135.readSensor(); 
  medidas += String(NH4, 2)+"#";
  MQ135.setA(34.668); MQ135.setB(-3.369); // Concentración de Aceton
  float Aceton = MQ135.readSensor(); 
  medidas += String(Aceton, 2)+"#";

  // ----------------------------- Publicación MQTT ------------------------------

  if (!mqttClient.connected()) {
    reconectar();
  }
  mqttClient.loop();

  // Enviar mensaje cada 5 segundos
  static unsigned long previousMillis = 0;
  unsigned long currentMillis = millis();
  if (currentMillis - previousMillis >= 5000) {
    previousMillis = currentMillis;
    String message = medidas;
    mqttClient.publish(mqttTopic, message.c_str());
    Serial.println("Datos publicados");
  }

  medidas = "";
}


void reconectar() {
  while (!mqttClient.connected()) {
    Serial.print("Conectando a MQTT broker...");
    if (mqttClient.connect(clientName)) {
      Serial.println("conectado");
      mqttClient.subscribe(mqttTopic);
    } else {
      Serial.print("falló, rc=");
      Serial.print(mqttClient.state());
      Serial.println("intentando de nuevo en 5 segundos");
      delay(5000);
    }
  }
}


void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print("Mensaje recibido en el topic: ");
  Serial.println(topic);
  Serial.print("Contenido del mensaje: ");
  for (int i = 0; i < length; i++) {
    Serial.print((char)payload[i]);
  }
  Serial.println();
}
